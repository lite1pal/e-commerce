// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// Connects to the specified database through a connection string in .env file
datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    carts Cart[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Models for e-commerce logic
model Item {
    id String @id @default(cuid())
    name String
    description String
    price Int
    discount Int
    category String
    tags String[] @default([])
    quantity Int @default(0)
    availability Boolean @default(false)
    images String[]
    cartItems CartItem[]
}

model Cart {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    items CartItem[]
    totalItemsCount Int
    totalPrice Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isCheckedOut Boolean @default(false)
}

model CartItem {
    id String @id @default(cuid())
    cart Cart @relation(fields: [cartId], references: [id])
    cartId String
    item Item @relation(fields: [itemId], references: [id])
    itemId String
    quantity Int @default(1)
}
